#+STARTUP: content
* init.el
** Interface and tweaks
   Always answer y or n, does anyone type =yes= anymore?
   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

   Set cursor line mode globally
   #+BEGIN_SRC emacs-lisp
     (global-hl-line-mode)
   #+END_SRC

   Hide scroll bar
   #+BEGIN_SRC emacs-lisp
     (set-scroll-bar-mode nil)
   #+END_SRC

   Hide tool bar
   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode -1)
   #+END_SRC

   Don't show startup message
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
   #+END_SRC

   Don't show startup screen
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-screen t)
   #+END_SRC

   Don't show startup echo area message
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-echo-area-message t)
   #+END_SRC

   Remove borders
   #+BEGIN_SRC emacs-lisp
     (let ((no-border '(internal-border-width . 0)))
       (add-to-list 'default-frame-alist no-border)
       (add-to-list 'initial-frame-alist no-border))
   #+END_SRC

   Abbreviate buffer filename
   #+BEGIN_SRC emacs-lisp
     (diminish 'abbrev-mode "")
     (setq frame-title-format
	   '((:eval (if (buffer-file-name)
			(abbreviate-file-name (buffer-file-name))
		      "%b"))))
   #+END_SRC

   Undo tree
   M-x undo-tree-visualize or <kbd>C-x u</kbd>
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :diminish undo-tree-mode
       :init (global-undo-tree-mode))
   #+END_SRC

   Setup backup's file folder
   #+BEGIN_SRC emacs-lisp
     (defvar backup-dir "~/.emacs.d/backups/")
     (setq backup-directory-alist (list (cons "." backup-dir)))
     (setq make-backup-files nil)
   #+END_SRC

   Start in fullscreen mode
   #+BEGIN_SRC emacs-lisp
     ;; (custom-set-variables
     ;;  '(initial-frame-alist (quote ((fullscreen . maximized)))))
   #+END_SRC

   Let’s increase the cache before starting garbage collection:
   #+BEGIN_SRC emacs-lisp
     (setq gc-cons-threshold 50000000)
   #+END_SRC

   How to remove the warnings from the GnuTLS library when using HTTPS… increase the minimum prime bits size:
   #+BEGIN_SRC emacs-lisp
     (setq gnutls-min-prime-bits 4096)
   #+END_SRC

   Turn on Ctrl+c and Ctrl+v
   #+BEGIN_SRC emacs-lisp
     (cua-mode 1)
   #+END_SRC

   Make tab key do indent first then completion.
   #+BEGIN_SRC emacs-lisp
     (setq-default tab-always-indent 'complete)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (setq scroll-conservatively 10000
           scroll-preserve-screen-position t)
   #+END_SRC

** Custom file
   Set location of custom.el
   #+BEGIN_SRC emacs-lisp
      (setq custom-file (expand-file-name "~/.emacs.d/custom.el"))
   #+END_SRC

   Load custom file
   #+BEGIN_SRC emacs-lisp
      (load custom-file 'noerror)
   #+END_SRC

** Font
   Use the [[https://noto-website.storage.googleapis.com/pkgs/NotoMono-hinted.zip][Noto Mono]] font.
   #+BEGIN_SRC emacs-lisp
      (add-to-list 'default-frame-alist '(font . "noto mono 12" ))
      (set-face-attribute 'default t :font "noto mono 12" )
      (set-frame-font "noto mono 12")
   #+END_SRC

** Mac OSX
   Make Emacs use the $PATH set up by the user's shell
   #+BEGIN_SRC emacs-lisp
     ;; create constant to check OS
     (defconst *is-a-mac* (eq system-type 'darwin))

     (use-package exec-path-from-shell
       :ensure t
       :init (exec-path-from-shell-initialize))
   #+END_SRC

** Evil

   Extensible VI Layer

   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :ensure t
       :init
         (evil-mode 1)
       :config
       (defun minibuffer-keyboard-quit ()
         "Abort recursive edit.
      In Delete Selection mode, if the mark is active, just deactivate it;
      then it takes a second \\[keyboard-quit] to abort the minibuffer."
         (interactive)
         (if (and delete-selection-mode transient-mark-mode mark-active)
             (setq deactivate-mark  t)
           (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
           (abort-recursive-edit)))

       ;; Make escape quit everything, whenever possible.
       (define-key evil-normal-state-map [escape] 'keyboard-quit)
       (define-key evil-visual-state-map [escape] 'keyboard-quit)
       (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
       (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
       (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
       (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
       (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit))
   #+END_SRC

*** Evil Escape

    Escape with jk keys

    #+BEGIN_SRC emacs-lisp
      (use-package evil-escape
        :ensure t
        :diminish (evil-escape-mode)
        :config
        (evil-escape-mode)
        (setq-default evil-escape-delay 0.2)
        (setq-default evil-escape-key-sequence "jk"))
    #+END_SRC

*** Evil Surround

    Surrounding: parentheses, brackets, quotes, XML tags, and more.

    | Visual Mode    |
    |----------------|
    | S<textobject>  |
    | gS<textobject> |

    | Normal Mode    |
    |----------------|
    | ys<textobject> |
    | yS<textobject> |

    | Change       |
    |--------------|
    | cs<old><new> |

    | Delete         |
    |----------------|
    | ds<textobject> |

    #+BEGIN_SRC emacs-lisp
      (use-package evil-surround
        :ensure t
        :config
        (global-evil-surround-mode 1))
    #+END_SRC

*** Evil Matchit

    Press "%" to jump between matched tags

    #+BEGIN_SRC emacs-lisp
      (use-package evil-matchit
        :ensure t
        :config
        (global-evil-matchit-mode 1))
    #+END_SRC

*** Evil MC

    Multi cursors editing

    #+BEGIN_SRC emacs-lisp
      ;; C-n (evil-mc-make-and-goto-next-match)
      ;; C-p (evil-mc-make-and-goto-prev-match)
      ;; C-t (evil-mc-skip-and-goto-next-match)
      (use-package evil-mc
        :ensure t
        :diminish (evil-mc-mode)
        :config
        (global-evil-mc-mode  1))
    #+END_SRC

*** Evil Nerd Commenter

    Comment lines easier

    #+BEGIN_SRC emacs-lisp
      (use-package evil-nerd-commenter
        :ensure t)
    #+END_SRC

*** Evil Leader

    Vim leader key ported

    #+BEGIN_SRC emacs-lisp
      (use-package evil-leader
        :ensure t
        :init (global-evil-leader-mode)
        :config
        (evil-leader/set-leader ",")
        (setq evil-leader/in-all-states t)

        (evil-leader/set-key
          "SPC" 'projectile-find-file
          "TAB" 'switch-to-buffer
          ","   'avy-goto-char-2
          "."   'mode-line-other-buffer
          "<"   'avy-resume
          "1"   'delete-other-windows
          "_"   'split-window-below
          "|"   'split-window-right
          "b"   'buffer-menu
          "e"   'counsel-find-file
          "f"   'ag-project
          "i"   'counsel-imenu
          "ci"  'evilnc-comment-or-uncomment-lines
          "p"   'insert-register
          "q"   'kill-this-buffer
          "r"   'counsel-recentf
          "w"   'save-buffer
          "x"   'counsel-M-x
          "y"   'copy-to-register ))
    #+END_SRC

** Try
   Try packages and don't mess around
   #+BEGIN_SRC emacs-lisp
     (use-package try
       :ensure t)
   #+END_SRC

** Modeline
   Changing modeline
   #+BEGIN_SRC emacs-lisp
     (use-package telephone-line
       :ensure t
       :init
       (setq telephone-line-primary-left-separator 'telephone-line-identity-left
             telephone-line-secondary-left-separator 'telephone-line-identity-hollow-left
             telephone-line-primary-right-separator 'telephone-line-identity-right
             telephone-line-secondary-right-separator 'telephone-line-identity-hollow-right)
       (setq telephone-line-height 24
             telephone-line-evil-use-short-tag t)
       :config
       (telephone-line-evil-config))
   #+END_SRC

   Install mode-icons
   #+BEGIN_SRC emacs-lisp
     (use-package mode-icons
       :ensure t
       :config (mode-icons-mode))
   #+END_SRC

** IDO
   Set up IDO everywhere
   #+BEGIN_SRC emacs-lisp
     (setq ido-enable-flex-matching t
           ido-ignore-extensions t
           ido-use-virtual-buffers t
           ido-everywhere t)
     (ido-mode 1)
   #+END_SRC

   Add to IDO [[https://github.com/lewang/flx][flx]] package (fuzzy match)
   #+BEGIN_SRC emacs-lisp
     (use-package flx-ido
       :ensure t
       :init (setq ido-enable-flex-matching t
                   ido-use-faces nil)
       :config (flx-ido-mode 1))
   #+END_SRC

** Swiper
   [[https://github.com/nonsequitur/smex][smex]] - m-x enhancement
   #+BEGIN_SRC emacs-lisp
     (use-package smex
       :ensure t)
   #+END_SRC

   Counsel
   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :ensure t)
   #+END_SRC

   [[https://github.com/abo-abo/swiper][swiper]]
   #+BEGIN_SRC emacs-lisp
     (use-package swiper
       :ensure t
       :diminish ivy-mode
       :bind (("C-s" . swiper)
              ("M-x" . counsel-M-x)
              ("C-c C-f" . counsel-find-file))
       :config
       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (setq ivy-count-format "(%d/%d) ")

       (setq ivy-re-builders-alist
             '((ivy-switch-buffer . ivy--regex-plus)
               (t . ivy--regex-fuzzy)))
       )
   #+END_SRC

   Use ibuffer to list buffers
   #+BEGIN_SRC emacs-lisp
     (defalias 'list-buffers 'ibuffer)
     ;;(defalias 'list-buffers 'ibuffer-other-window)
   #+END_SRC

** Projectile
   Project Interaction Library
   #+BEGIN_SRC emacs-lisp
     (setq projectile-mode-line '(:eval (format " [%s]" (projectile-project-name))))
     (use-package projectile
       :ensure t
       :config
       (projectile-global-mode))
   #+END_SRC

   Counsel's Integration
   #+BEGIN_SRC emacs-lisp
     (use-package counsel-projectile
       :ensure t
       :config
       (counsel-projectile-on))
   #+END_SRC

** AG
   [[https://github.com/ggreer/the_silver_searcher][Silver Search]]
   #+BEGIN_SRC sh :tangle no :dir /sudo:: :results output silent
       sudo apt install silversearcher-ag
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package ag
       :ensure t
       :config
       (setq ag-executable "/usr/bin/ag"))
   #+END_SRC

** Linum
   Line numbers
   #+BEGIN_SRC emacs-lisp
     (use-package linum-relative
       :ensure t
       :bind (("<f7>" . linum-mode))
       :init
       (global-linum-mode t)
       (linum-relative-mode t)
       :config
       (linum-mode)
       (custom-set-faces
        '(linum-relative-current-face ((t (:foreground "#fdf6e3" :background "#073642" :weight bold)))))
       (setq linum-relative-current-symbol ""))
   #+END_SRC

** Avy
   Jump to things
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :ensure t)
   #+END_SRC

** Parens
   Smartparens
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :bind (("<f8>" . smartparens-mode))
       :ensure t)
   #+END_SRC

   Rainbow delimiters
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :bind (("<f6>" . rainbow-delimiters-mode))
      :ensure t)
   #+END_SRC

** Emmet
   Greatly improves HTML & CSS workflow
   #+BEGIN_SRC emacs-lisp
     (use-package emmet-mode
       :ensure t
       :diminish emmet-mode
       :config
       (add-hook 'sgml-mode-hook 'emmet-mode)
       (add-hook 'css-mode-hook 'emmet-mode)
       (add-hook 'web-mode-hook 'emmet-mode))
   #+END_SRC

** Flycheck
   On the fly syntax checking
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :diminish (flycheck-mode)
       :config (global-flycheck-mode))
   #+END_SRC

** Org
   UTF-8 bullets
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook '(lambda() (org-bullets-mode))))
   #+END_SRC

** Programming Languages
*** General Language Support
**** EditorConfig

     Define and maintain consistent coding styles
     #+BEGIN_SRC emacs-lisp
       (use-package editorconfig
         :ensure t
         :diminish (editorconfig-mode . "")
         :config (editorconfig-mode 1))
     #+END_SRC

**** Yasnippet

   Template system
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :diminish yas-minor-mode
       :config (yas-global-mode 1))
   #+END_SRC

**** Tag support

    Install on Ubuntu
   #+BEGIN_SRC sh :tangle no :dir /sudo:: :results output silent
      sudo apt-get install -y exuberant-ctags
    #+END_SRC

    *Note:* For every project, run the following command:
    #+BEGIN_SRC sh :tangle no
      ctags -R .
    #+END_SRC

**** Red Warnings

     It turns red some important words in comments
     #+BEGIN_SRC emacs-lisp
       (add-hook 'prog-mode-hook
                 (lambda ()
                   (font-lock-add-keywords nil
                                           '(("\\<\\(FIX\\|FIXME\\|TODO\\|BUG\\|HACK\\):" 1 font-lock-warning-face t)))))
     #+END_SRC

**** Auto complete

     Install company-mode
     #+BEGIN_SRC emacs-lisp
       (use-package company
         :ensure t
         :diminish company-mode
         :bind(("M-n" . company-complete))
         :config
         (global-company-mode))
     #+END_SRC

*** PHP
    Dependencies
    #+BEGIN_SRC sh :dir /sudo:: :results output silent :tangle no
      apt install -y php-cli cscope
    #+END_SRC

    Install php-mode
    #+BEGIN_SRC emacs-lisp
      (use-package php-mode
        :ensure t
        :config

        ;; Automatically delete trailing whitespace on save
        (add-to-list 'write-file-functions 'delete-trailing-whitespace)

        ;; make these variables local
        (make-local-variable 'web-mode-code-indent-offset)
        (make-local-variable 'web-mode-markup-indent-offset)
        (make-local-variable 'web-mode-css-indent-offset)

        ;; set indentation, can set different indentation level for different code type
        (setq web-mode-code-indent-offset 4)
        (setq web-mode-css-indent-offset 2)
        (setq web-mode-markup-indent-offset 2))
    #+END_SRC

    Snippets to common php functions
    #+BEGIN_SRC emacs-lisp
      (use-package php-auto-yasnippets
        :bind(("C-c C-j" . yas/create-php-snippet))
        :ensure t)
    #+END_SRC

    Minor modes for php-mode-hook
    #+BEGIN_SRC emacs-lisp
      (defun rzani/php-mode-hook()
        "Configures php-mode"

        (require 'php-auto-yasnippets)

        ;; Pair brackets
        (electric-pair-mode 1)

        ;; Auto complete backend
        (set (make-local-variable 'company-backends)
             '((php-extras-company company-dabbrev) company-capf company-files)))


      (add-hook 'php-mode-hook 'rzani/php-mode-hook)
    #+END_SRC

*** JS
    #+BEGIN_SRC emacs-lisp
      (use-package js2-mode
        :ensure t
        :config
        (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))


      (use-package json-mode
        :ensure t)

      (defun rzani/js-mode-hook()
        "Configure js2-mode"
        (auto-complete-mode t)
        (electric-pair-mode 1))

      (add-hook 'js2-mode 'rzani/js-mode-hook)
    #+END_SRC

*** Web mode
    Install web-mode
    #+BEGIN_SRC emacs-lisp
      (use-package web-mode
        :ensure t
        :mode (("\\.html$" . web-mode)
               ("\\.blade\\.php$" . web-mode))
        :config
        (setq web-mode-engines-alist
              '( ("blade"  . "\\.blade\\.")))

        (setq web-mode-ac-sources-alist
              '(("php" . (ac-source-php-extras ac-source-yasnippet ac-source-gtags ac-source-abbrev ac-source-dictionary ac-source-wordsin-same-mode-buffers))
                ("html" . (ac-source-emmet-html-aliases ac-source-emmet-html-snippets))
                ("css" . (ac-source-css-property ac-source-abbrev ac-source-dictionary ac-source-words-in-same-mode-buffers)))))
    #+END_SRC

    Minor modes
    #+BEGIN_SRC emacs-lisp
      (add-hook 'web-mode-before-auto-complete-hooks
                '(lambda ()
                   (let ((web-mode-cur-language (web-mode-language-at-pos)))
                     (if (string= web-mode-cur-language "php")
                         (yas-activate-extra-mode 'php-mode)
                       (yas-deactivate-extra-mode 'php-mode))
                     (if (string= web-mode-cur-language "css")
                         (setq emmet-use-css-transform t)
                       (setq emmet-use-css-transform nil)))))

      (defun rzani/web-mode-hook()
        "Configure web-mode-hook"
        (electric-pair-mode -1))

      (add-hook 'web-mode-hook 'rzani/web-mode-hook)
    #+END_SRC

*** Go
    Install go-mode
    #+BEGIN_SRC emacs-lisp
      (use-package go-mode
        :ensure t
        :mode(("\\.go$" . go-mode))
        :config
	(add-to-list 'write-file-functions 'delete-trailing-whitespace))

      (defun rzani/go-mode-hook()
        "Setting up go-mode"

        ;; Pair brackets
        (electric-pair-mode 1))

      (add-hook 'go-mode-hook 'rzani/go-mode-hook)
    #+END_SRC

*** ELisp
    #+BEGIN_SRC emacs-lisp
      (defun rzani/elisp-mode-hook()
        "Configures ELisp mode hook"

        ;; Show matching paren
        (show-paren-mode)
        ;; Auto close delimiters
        (smartparens-mode)
        ;; Fancy highlights delimiters
        (rainbow-delimiters-mode))

      (add-hook 'emacs-lisp-mode-hook 'rzani/elisp-mode-hook)
    #+END_SRC

*** YML
    #+BEGIN_SRC emacs-lisp
      (use-package yaml-mode
        :ensure t)
    #+END_SRC

*** Dotenv
    #+BEGIN_SRC emacs-lisp
      (setq dotenv-mode-highlights
            '(;; ("^[^[:alpha:]_].*\\|:[^[:space:]]+.*\\|=[[:space:]].*" . font-lock-warning-face)
              ("^[[:alpha:]_]+[[:alpha:][:digit:]_]*" . font-lock-variable-name-face)
              ;; ("=?\\|:?[[:space:]]" . font-lock-comment-delimiter-face)
              ("#.*" . font-lock-comment-face)))

      (define-derived-mode dotenv-mode
        prog-mode
        (setq-local font-lock-defaults '(dotenv-mode-highlights))
        (setq-local mode-name "Env"))
    #+END_SRC

*** Dockerfile
    #+BEGIN_SRC emacs-lisp
      (use-package dockerfile-mode
        :ensure t)
    #+END_SRC

*** Nginx
    #+BEGIN_SRC emacs-lisp
      (use-package nginx-mode
        :ensure t)
    #+END_SRC

** Keymaps
   F5 to refresh buffers
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "<f5>") 'revert-buffer)
   #+END_SRC

   Add comma and semicolon
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-,") 'rzani/add-comma-end-of-line)
     (global-set-key (kbd "C-;") 'rzani/add-semicolon-end-of-line)
   #+END_SRC

   Indent all buffer
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c i") 'indent-buffer)
   #+END_SRC

** Themes
   Install Solarized from sanityinc
   #+BEGIN_SRC emacs-lisp
    (use-package color-theme-sanityinc-solarized
      :ensure t)
   #+END_SRC

   Load Theme
   #+BEGIN_SRC emacs-lisp
     (load-theme 'sanityinc-solarized-light t)
     ;; (load-theme 'atom-one-dark t)
   #+END_SRC


#+BEGIN_SRC shell

echo "teste"

#+END_SRC
