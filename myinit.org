#+STARTIP: overview
* :ok_hand: Interface tweaks
** Utility
    #+BEGIN_SRC emacs-lisp
      (fset 'yes-or-no-p 'y-or-n-p)
      (global-hl-line-mode)
    #+END_SRC

** Spaceline
   #+BEGIN_SRC emacs-lisp
     (use-package spaceline
       :ensure t
       :config (progn 
           (require 'spaceline-config)
           (spaceline-spacemacs-theme)))

     (setq ns-use-srgb-colorspace nil)
   #+END_SRC

** Backup
   #+BEGIN_SRC emacs-lisp
     (defvar backup-dir "~/.emacs.d/backups/")
     (setq backup-directory-alist (list (cons "." backup-dir)))
     (setq make-backup-files nil)
   #+END_SRC
** Frame
    #+BEGIN_SRC emacs-lisp
      (setq inhit-startup-message t)
      (tool-bar-mode -1)
      (setq inhibit-startup-screen t)
      (setq inhibit-startup-echo-area-message t)
      (set-scroll-bar-mode nil)

      (let ((no-border '(internal-border-width . 0)))
        (add-to-list 'default-frame-alist no-border)
        (add-to-list 'initial-frame-alist no-border))

      (setq frame-title-format
            '((:eval (if (buffer-file-name)
                         (abbreviate-file-name (buffer-file-name))
                       "%b"))))
    #+END_SRC

** Buffers
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "<f5>") 'revert-buffer)
    #+END_SRC

** Font
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'default-frame-alist '(font . "Fira Mono for Powerline 12" ))
      (set-face-attribute 'default t :font "Fira Mono for Powerline 12" )
      (set-frame-font "Fira Mono for Powerline 12")   ; Change default font
    #+END_SRC

** Emojis
   #+BEGIN_SRC emacs-lisp
     (use-package emojify
       :ensure t
       :config (add-hook 'after-init-hook #'global-emojify-mode))   
   #+END_SRC

* :rose: Themes
  #+BEGIN_SRC emacs-lisp
    ;;(defun reapply-themes ()
    ;;  "Forcibly load the themes listed in `custom-enabled-themes'."
    ;;  (dolist (theme custom-enabled-themes)
    ;;    (unless (custom-theme-p theme)
    ;;      (load-theme theme)))
    ;;  (custom-set-variables `(custom-enabled-themes (quote ,custom-enabled-themes))))

    (defun light ()
      "Activate a light color theme."
      (interactive)
      (color-theme-sanityinc-solarized-light))

    (defun dark ()
      "Activate a dark color theme."
      (interactive)
      (color-theme-sanityinc-solarized-dark))

    (use-package color-theme-sanityinc-solarized
      :ensure t)

    (use-package solarized-theme
      :ensure t)

    (use-package atom-one-dark-theme
      :ensure t)

    (use-package flatui-theme
      :ensure t)

    ;; (add-hook 'after-init-hook 'reapply-themes)

  #+END_SRC

* :eyeglasses: IDO
  #+BEGIN_SRC emacs-lisp
    (setq ido-everywhere t)
    (ido-mode 1)

    (use-package ido-ubiquitous
      :ensure t
      :config (ido-ubiquitous-mode 1))

    (defalias 'list-buffers 'ibuffer)
    ;;(defalias 'list-buffers 'ibuffer-other-window)
  #+END_SRC

* :fox: Swiper & Counsel
  #+BEGIN_SRC emacs-lisp
    (use-package smex
      :ensure t)

    (use-package counsel
      :ensure t)

    (use-package swiper
      :ensure t
      :bind (("C-s" . swiper)
             ("M-x" . counsel-M-x)
             ("C-c C-f" . counsel-find-file))
      :config
      (progn
        (ivy-mode 1)
        (setq ivy-use-virtual-buffers t)
        (setq ivy-count-format "(%d/%d) ")

        (use-package flx
          :ensure t)

        (setq ivy-re-builders-alist
              '((ivy-switch-buffer . ivy--regex-plus)
                (t . ivy--regex-fuzzy)))
        ))  
  #+END_SRC

* :mag_right: AG
  #+BEGIN_SRC emacs-lisp
    (defun set-exec-path-from-shell-PATH ()
      "Set up Emacs' `exec-path' and PATH environment variable to match that used by the user's shell.

    This is particularly useful under Mac OSX, where GUI apps are not started from a shell."
      (interactive)
      (let ((path-from-shell (replace-regexp-in-string "[ \t\n]*$" "" (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
        (setenv "PATH" path-from-shell)
        (setq exec-path (split-string path-from-shell path-separator))))

    (set-exec-path-from-shell-PATH)

    (use-package ag
      :ensure t
      :config (setq ag-executable "/usr/local/bin/ag"))
  #+END_SRC

* :file_folder: Projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t
      :config (progn

                (use-package counsel-projectile
                  :ensure t
                  :config (counsel-projectile-on))

                (projectile-global-mode)
                ))
  #+END_SRC

* :smiling_imp: Evil-mode 
  #+BEGIN_SRC emacs-lisp
    (use-package evil
      :ensure t
      :init
      (progn

        ;; evil-surround
        (use-package evil-surround
          :ensure t
          :config (global-evil-surround-mode 1))

        ;; evil-matchit
        (use-package evil-matchit
          :ensure t
          :config (global-evil-matchit-mode 1))

        ;; evil-mc  
        ;; C-n (evil-mc-make-and-goto-next-match)
        ;; C-p (evil-mc-make-and-goto-prev-match)
        ;; C-t (evil-mc-skip-and-goto-next-match)
        (use-package evil-mc
          :ensure t
          :config (global-evil-mc-mode  1))

        ;; evil-leader
        (use-package evil-leader
          :ensure t
          :init (global-evil-leader-mode)
          :config
          (progn
            (evil-leader/set-leader ",")
            (setq evil-leader/in-all-states t)

            ;; evil-nerd-commenter
            (use-package evil-nerd-commenter 
              :ensure t
              )

            (evil-leader/set-key
              "SPC" 'projectile-find-file
              "TAB" 'switch-to-buffer
              ","   'avy-goto-char-2
              "<"   'avy-resume
              "."   'mode-line-other-buffer
              "1"   'delete-other-windows
              "_"   'split-window-below
              "|"   'split-window-right
              "b"   'buffer-menu
              "e"   'counsel-find-file
              "f"   'counsel-projectile-ag
              "ci"  'evilnc-comment-or-uncomment-lines
              "p"   'insert-register
              "q"   'kill-this-buffer
              "r"   'counsel-recentf
              "y"   'copy-to-register
              )))

        (evil-mode 1))

      :config
      (progn
        
        ;; use ido to open files
        ;;(define-key evil-ex-map "e " 'ido-find-file)
        ;;(define-key evil-ex-map "b " 'ido-switch-buffer)
        
        ;; Make escape quit everything, whenever possible.

        (define-key evil-normal-state-map [escape] 'keyboard-quit)
        (define-key evil-visual-state-map [escape] 'keyboard-quit)
        (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
        (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
        (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
        (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
        (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)

        ))
  #+END_SRC

* :straight_ruler: Linum
#+BEGIN_SRC emacs-lisp
(use-package linum-relative
    :ensure t
    :bind (("<f7>" . linum-mode))
    :init (progn (global-linum-mode t) (linum-relative-mode t) )
    :config
    (progn
    (linum-mode)
    (custom-set-faces
	'(linum-relative-current-face ((t (:foreground "#a89984" :weight bold)))))
    ))
#+END_SRC

* :dart: Try
  #+BEGIN_SRC emacs-lisp
    (use-package try
      :ensure t)
  #+END_SRC
  
* :key: Which-key
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t
      :diminish (which-key-mode . "which-key")
      :config (which-key-mode))
  #+END_SRC
  
* :date: Org-mode
** org-bullets
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda() (org-bullets-mode 1))))
   #+END_SRC

* :rabbit: Jumping around with AVY
  #+BEGIN_SRC emacs-lisp
    (use-package avy
      :ensure t)
  #+END_SRC

* :family: Parens
  #+BEGIN_SRC emacs-lisp
        (use-package smartparens
          :ensure t)

         (use-package rainbow-delimiters
          :ensure t)
  #+END_SRC

* :eyes: Magit
  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :bind (("C-c m" . magit-status))) 
  #+END_SRC
  
* :triangular_ruler: Emmet
  #+BEGIN_SRC emacs-lisp
    (use-package emmet-mode
      :ensure t
      :config
      (progn
        (add-hook 'sgml-mode-hook 'emmet-mode)
        (add-hook 'css-mode-hook 'emmet-mode)
	    (add-hook 'web-mode-hook 'emmet-mode))
      ) 
  #+END_SRC

* :book: Auto-Complete
  #+BEGIN_SRC emacs-lisp
    (use-package auto-complete
      :ensure t
      :init
      (progn
        (ac-config-default)
        (global-auto-complete-mode t)
        ))
  #+END_SRC

* :tongue: Langagues
** Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :diminish (flycheck-mode . "fly"))
  #+END_SRC

** Editor Config
   #+BEGIN_SRC emacs-lisp
     (use-package editorconfig
       :ensure t
       :diminish (editorconfig-mode . "editorconfig")
       :config (editorconfig-mode 1))
   #+END_SRC

** Web
   #+BEGIN_SRC emacs-lisp
     (use-package web-mode
       :ensure t) 

     (setq web-mode-engines-alist
           '( ("blade"  . "\\.blade\\.")))

     (setq web-mode-ac-sources-alist
           '(("php" . (ac-source-yasnippet ac-source-php-auto-yasnippets))
             ("html" . (ac-source-emmet-html-aliases ac-source-emmet-html-snippets))
             ("css" . (ac-source-css-property ac-source-emmet-css-snippets))))

     (add-hook 'web-mode-hook '(lambda()
                                 (electric-pair-mode -1)
                                 ))

   #+END_SRC

** LISP
   #+BEGIN_SRC emacs-lisp
     (defun rzani/lisp-mode-hook ()
       (smartparens-mode t)
       (rainbow-delimiters-mode t))

     (add-hook 'emacs-lisp-mode-hook 'rzani/lisp-mode-hook)
   #+END_SRC

** PHP
   #+BEGIN_SRC emacs-lisp
     (use-package php-mode
       :ensure t)

     (use-package ac-php
       :ensure t)

     (add-hook 'php-mode-hook (lambda()
                                (smartparens-mode 1)
                                (auto-complete-mode t)
                                (setq ac-sources  '(ac-source-php ) )
                                (yas-global-mode 1)
                                (electric-pair-mode 1)
                                ))

     (defun rzani/php-config ()
       (php-mode)
       (eldoc-mode t)
       (setq auto-fill-function 'do-auto-fill)
       (add-to-list 'write-file-functions 'delete-trailing-whitespace)
       
       ;; make these variables local
       (make-local-variable 'web-mode-code-indent-offset)
       (make-local-variable 'web-mode-markup-indent-offset)
       (make-local-variable 'web-mode-css-indent-offset)

       ;; set indentation, can set different indentation level for different code type
       (setq web-mode-code-indent-offset 4)
       (setq web-mode-css-indent-offset 2)
       (setq web-mode-markup-indent-offset 2))

     (add-to-list 'auto-mode-alist '("\\.php$" . rzani/php-config))

     (define-key php-mode-map [f6] 'web-mode)
     (define-key web-mode-map [f6] 'php-mode)
   #+END_SRC

** YML
  #+BEGIN_SRC emacs-lisp
    (use-package yaml-mode
      :ensure t)
  #+END_SRC 

** Dockerfile
   #+BEGIN_SRC emacs-lisp
     (use-package dockerfile-mode
       :ensure t) 
   #+END_SRC

** Nginx
   #+BEGIN_SRC emacs-lisp
     (use-package nginx-mode
       :ensure t)
   #+END_SRC
   
